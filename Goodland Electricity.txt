Prepare Algorithms Greedy Goodland Electricity

using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'pylons' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER k
     *  2. INTEGER_ARRAY arr
     */

    public static int pylons(int k, List<int> arr)
    {
        int[] intArr = new int[arr.Count()];
        int point = 0;
        bool direction = true;
        //Console.WriteLine(intArr[0]);
        for(int i=0;i<arr.Count;i++){
            if(intArr[i]==1)continue;
            // Console.Write("i----");
            // Console.WriteLine(i);
            for(int j=i+k-1;j>=i-k+1;j--){
                if(j>=0&&j<arr.Count){
                    // Console.Write("j----");
                    // Console.WriteLine(j);
                    // Console.Write("arr[j]----");
                    // Console.WriteLine(arr[j]);
                    if(arr[j]==1){
                        point ++;
                        for(int d=j+k-1;d>=j-k+1;d--){
                            if(d>=0 && d<arr.Count)
                            intArr[d]=1;
                        }
                        break;
                    } 
                }
            }
        }
        int count = intArr.Count(x=>x==0);
        if(count>0)point=-1;
        // int record = 0;
        // bool direction = true;
        // for(int i=0;i<arr.Count();i++){
        //     Console.WriteLine(i);
        //     Console.WriteLine("---");
        //     if(arr[i]==0){
        //         record=0;
        //         direction=true;
        //     }
        //     else{
        //         if(direction)
        //             record++;
        //         else{
        //             record--;
        //         }
        //     }
        //     Console.WriteLine(record);
        //     Console.WriteLine(direction);
        //     if(record==k){
        //         intArr[i]=1;
        //         direction=false;
        //     }
        //     if(!direction && record==0){
        //         direction=true;
        //         record=1;
        //     }
        //     Console.WriteLine(record);
        //     Console.WriteLine(direction);
        //     Console.WriteLine("--------------");
            
        // }
        // List<int> l = intArr.ToList();
        // return l.Count(x=>x==1);
        return point;
    }

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] firstMultipleInput = Console.ReadLine().TrimEnd().Split(' ');

        int n = Convert.ToInt32(firstMultipleInput[0]);

        int k = Convert.ToInt32(firstMultipleInput[1]);

        List<int> arr = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(arrTemp => Convert.ToInt32(arrTemp)).ToList();

        int result = Result.pylons(k, arr);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
